<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1550112539302" stop="1550112657696">
  <name>testcases</name>
  <labels/>
  <test-cases>
    <test-case start="1550112539302" status="failed" stop="1550112603900">
      <name>test_login.TestLogin.test_login_success[login_data0]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;testcases.test_login.TestLogin object at 0x0000000004447748&gt;
nologin_driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="22044a88a857880700f890e97873189b")&gt;
login_data = {'check_url': 'http://211.103.188.27:8077/Navigation/main.aspx', 'passwd': 'zbyw@zbyw', 'user': 'admin'}

    @pytest.mark.smoke
    @pytest.mark.usefixtures("nologin_driver")
    @pytest.mark.parametrize("login_data",LD.login_data)
    def test_login_success(self, nologin_driver,login_data):
        logging.info("*********登陆用例：正常场景：使用正确的用户名和密码登陆*********")
&gt;       LoginPage(nologin_driver).login_page(login_data["user"], login_data["passwd"])

testcases\test_login.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageobjects\login_page.py:20: in login_page
    self.wait_elementvisibility(self.user_input, by=By.ID, model=name)
common\basepage.py:30: in wait_elementvisibility
    WebDriverWait(self.driver,wait,requence).until(EC.visibility_of_element_located((by,locator)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="22044a88a857880700f890e97873189b")&gt;
method = &lt;selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000000004469EB8&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

C:\Python34\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments>
        <attachment source="1b50e4aa-749b-4e64-b6c0-aeaa4bb99b55-attachment.txt" title="Captured stderr setup" type="text/plain"/>
        <attachment source="35c9da9a-9bc9-4b52-aaea-fdfc90519a91-attachment.txt" title="Captured log call" type="text/plain"/>
        <attachment source="6641a1bc-1f4b-4f4f-b331-b5a9d315af6e-attachment.txt" title="Captured stderr call" type="text/plain"/>
        <attachment source="e0b18877-3f4c-4629-85a6-ae5e4e3dae01-attachment.txt" title="Captured log setup" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="8504-MainThread"/>
        <label name="host" value="sanyth-PC"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1550112607318" status="failed" stop="1550112657696">
      <name>test_login.TestLogin.test_login_success[login_data1]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;testcases.test_login.TestLogin object at 0x00000000044386D8&gt;
nologin_driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="6128f25bbd4e15f6146691de20f0f43b")&gt;
login_data = {'check_url': 'http://211.103.188.27:8077/Navigation/main.aspx', 'passwd': 'zbyw@zbyw', 'user': 'admin'}

    @pytest.mark.smoke
    @pytest.mark.usefixtures("nologin_driver")
    @pytest.mark.parametrize("login_data",LD.login_data)
    def test_login_success(self, nologin_driver,login_data):
        logging.info("*********登陆用例：正常场景：使用正确的用户名和密码登陆*********")
&gt;       LoginPage(nologin_driver).login_page(login_data["user"], login_data["passwd"])

testcases\test_login.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageobjects\login_page.py:20: in login_page
    self.wait_elementvisibility(self.user_input, by=By.ID, model=name)
common\basepage.py:30: in wait_elementvisibility
    WebDriverWait(self.driver,wait,requence).until(EC.visibility_of_element_located((by,locator)))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="6128f25bbd4e15f6146691de20f0f43b")&gt;
method = &lt;selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x000000000484C7B8&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
            return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

C:\Python34\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments>
        <attachment source="f44be0b9-2808-4b85-89af-87ae5b68bb3c-attachment.txt" title="Captured stderr setup" type="text/plain"/>
        <attachment source="2c09a04a-7a7b-461b-abd3-7723127af91d-attachment.txt" title="Captured log call" type="text/plain"/>
        <attachment source="e2f3a5cb-7dfc-4b52-8a43-aad042993e50-attachment.txt" title="Captured stderr call" type="text/plain"/>
        <attachment source="9c38cfa5-99b7-4cd3-a16a-1dc3ce1c647a-attachment.txt" title="Captured log setup" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="8504-MainThread"/>
        <label name="host" value="sanyth-PC"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
